services:
    rest-villains:
        image: quarkus/rest-villains:1.0.0-SNAPSHOT
        container_name: "rest-villains"
        depends_on:
            database:
                condition: service_healthy
        ports:
            - "8084:8084"
        environment:
            QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://database:5432/villains_database

    rest-heroes:
        image: quarkus/rest-heroes:1.0.0-SNAPSHOT
        container_name: "rest-heroes"
        depends_on:
            database:
                condition: service_healthy
        ports:
            - "8083:8083"
        environment:
            QUARKUS_DATASOURCE_REACTIVE_URL: postgresql://database:5432/heroes_database

    rest-narration:
        image: quarkus/rest-narration:1.0.0-SNAPSHOT
        container_name: "rest-narration"
        ports:
            - "8086:8086"

    rest-fights:
        image: quarkus/rest-fights:1.0.0-SNAPSHOT
        container_name: "rest-fights"
        depends_on:
            - rest-villains
            - rest-heroes
            - rest-narration
        ports:
            - "8082:8082"
        environment:
            QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://database:5432/fights_database
            QUARKUS_REST_CLIENT_HERO_URL: http://rest-heroes:8083
            QUARKUS_REST_CLIENT_VILLAIN_URL: http://rest-villains:8084
            QUARKUS_REST_CLIENT_NARRATION_URL: http://rest-narration:8086
            KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092

    event-statistics:
        image: quarkus/event-statistics:1.0.0-SNAPSHOT
        container_name: "event-statistics"
        ports:
            - "8085:8085"
        environment:
            KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092

    ui-super-heroes:
        image: quarkus/ui-super-heroes:1.0.0-SNAPSHOT
        container_name: "ui-super-heroes"
        depends_on:
            - rest-fights
        ports:
            - "8080:8080"
        environment:
            API_BASE_URL: http://localhost:8082

    database:
        image: "postgres:14"
        container_name: "super-database"
        ports:
            - "5432:5432"
        environment:
            POSTGRES_PASSWORD: password
        volumes:
            - ./db-init/initialize-databases.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 5s
            timeout: 5s
            retries: 5

    kafka:
        image: quay.io/strimzi/kafka:0.28.0-kafka-3.1.0
        container_name: "super-kafka"
        command: [
            "sh", "-c",
            "export CLUSTER_ID=$$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh format -t $${CLUSTER_ID} -c config/kraft/server.properties && bin/kafka-server-start.sh config/kraft/server.properties --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS}"
        ]
        ports:
            - "9092:9092"
        environment:
            LOG_DIR: "/tmp/logs"
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
